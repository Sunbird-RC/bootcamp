version: "2.4"

services:
  db:
    image: postgres
    volumes:
      - ./${DB_DIR-db-data}:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  registry:
    image: dockerhub/sunbird-rc-core:${RELEASE_VERSION}
    volumes:
      - ./${PUBLIC_SCHEMA_DIR-java/registry/src/main/resources/public/_schemas}:/home/sunbirdrc/config/public/_schemas
#      - ./${PRIVATE_SCHEMA_DIR-java/registry/src/main/resources/internal/_schemas}:/home/sunbirdrc/config/internal/_schemas
      - ./${VIEW_DIR-java/registry/src/main/resources/views}:/home/sunbirdrc/config/views/
    environment:
      - connectionInfo_uri=jdbc:postgresql://${DB_URL}:${DB_PORT}/${DB_NAME}
      - connectionInfo_username=${DB_USERNAME}
      - connectionInfo_password=${DB_PASSWORD}
      - event_enabled=${EVENT_ENABLED-false}
      - event_topic=events
      - event_providerName=dev.sunbirdrc.registry.service.impl.KafkaEventService
      - search_providerName=${SEARCH_PROVIDER_NAME-dev.sunbirdrc.registry.service.ElasticSearchService}
      - sunbird_sso_realm=${KEYCLOAK_REALM-sunbird-rc}
      - sunbird_sso_url=http://keycloak:8080/auth
      - sunbird_sso_admin_client_id=${KEYCLOAK_ADMIN_CLIENT_ID-admin-api}
      - sunbird_sso_client_id=${KEYCLOAK_CLIENT_ID-registry-frontend}
      - sunbird_sso_admin_client_secret=${KEYCLOAK_SECRET}
      - claims_url=http://claim-ms:8082
      - sign_url=http://certificate-signer:8079/sign
      - verify_url=http://certificate-signer:8079/verify
      - sign_health_check_url=http://certificate-signer:8079/health
      - signature_enabled=true
      - pdf_url=http://certificate-api:8078/api/v1/certificatePDF
      - certificate_health_check_url=http://certificate-api:8078/health
      - template_base_url=http://registry:8081/api/v1/templates/ #Looks for certificate templates for pdf copy of the signed certificate
      - sunbird_keycloak_user_set_password=true
      - filestorage_connection_url=http://file-storage:9000
      - filestorage_access_key=admin
      - filestorage_secret_key=12345678
      - filestorage_bucket_key=issuance
      - registry_base_apis_enable=false
      - sunbird_keycloak_user_password=abcd@123
      - logging.level.root=INFO
      - enable_external_templates=true
      - async_enabled=${ASYNC_ENABLED-false}
      - authentication_enabled=false
      - kafka_bootstrap_address=kafka:9092
      - redis_host=redis
      - redis_port=6379
      - manager_type=${MANAGER_TYPE-DefinitionsManager}
      - notification_async_enabled=${NOTIFICATION_ASYNC_ENABLED-false}
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t1 --spider http://localhost:8081/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  keycloak:
    image: dockerhub/sunbird-rc-keycloak:${RELEASE_VERSION}
    volumes:
      - ./${KEYCLOAK_IMPORT_DIR-imports/keycloak}:/opt/jboss/keycloak/imports
    environment:
      - KEYCLOAK_LOGO=https://svgshare.com/i/hCs.svg
      - DB_VENDOR=postgres
      - DB_ADDR=${DB_URL}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_NAME}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - KEYCLOAK_USER=${KEYCLOAK_ADMIN_USER-admin}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD-admin}
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/realm-export.json
      - PROXY_ADDRESS_FORWARDING=true
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9990/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "8080:8080"
      - "9990:9990"
    depends_on:
      db:
        condition: service_healthy
  claim-ms:
    image: dockerhub/sunbird-rc-claim-ms:${RELEASE_VERSION}
    environment:
      - connectionInfo_uri=jdbc:postgresql://${DB_URL}:${DB_PORT}/${DB_NAME}
      - connectionInfo_username=${DB_USERNAME}
      - connectionInfo_password=${DB_PASSWORD}
      - sunbirdrc_url=http://registry:8081
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_started
      registry:
        condition: service_started
    healthcheck:
      test: [ "CMD-SHELL", "wget -nv -t1 --spider http://localhost:8082/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  certificate-signer:
    image: dockerhub/sunbird-rc-certificate-signer:${RELEASE_VERSION}
    environment:
      - PORT=8079
    ports:
      - "8079:8079"
    volumes:
      - ./imports/signer:/etc/signer
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -f http://localhost:8079/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  certificate-api:
    image: dockerhub/sunbird-rc-certificate-api:${RELEASE_VERSION}
    environment:
      - PORT=8078
    ports:
      - "8078:8078"
    healthcheck:
      test:
        [ "CMD-SHELL", "wget -nv -t1 --spider http://localhost:8078/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
  file-storage:
    image: quay.io/minio/minio
    volumes:
      - ${HOME}/minio/data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
    command: server --address 0.0.0.0:9000 --console-address 0.0.0.0:9001 /data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 10
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: "2181"
#      ZOOKEEPER_TICK_TIME: "2000"
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      zookeeper:
#        condition: service_started
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: "1"
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,OUTSIDE://localhost:9094"
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT"
#      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
#    healthcheck:
#      test:
#        [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
#      interval: 30s
#      timeout: 10s
#      retries: 10
  public-key-service:
    image: dockerhub/sunbird-rc-public-key-service:${RELEASE_VERSION}
    environment:
      - CONFIG_BASE_PATH=/etc/keys
    ports:
      - "3300:3300"
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:3300/public-key-service/api/v1/health" ]
      interval: 30s
      timeout: 10s
      retries: 10
    volumes:
      - ./imports/signer:/etc/keys
  context-proxy-service:
    image: dockerhub/sunbird-rc-context-proxy-service:${RELEASE_VERSION}
    ports:
      - "4400:4400"
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:4400/health" ]
      interval: 30s
      timeout: 10s
      retries: 10
  nginx:
    image: srprasanna/nginx-gateway
    ports:
      - "80:80"
    depends_on:
      registry:
        condition: service_healthy
      context-proxy-service:
        condition: service_started
      public-key-service:
        condition: service_started
      keycloak:
        condition: service_started
      claim-ms:
        condition: service_started
      file-storage:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:80" ]
      interval: 30s
      timeout: 10s
      retries: 10
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
#  metrics:
#    image: dockerhub/sunbird-rc-metrics:${RELEASE_VERSION}
#    environment:
#      CLICK_HOUSE_URL: clickhouse:9000
#      CLICKHOUSE_DATABASE: default
#      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
#      KAFKA_METRICS_TOPIC: events
#      REDIS_URL: redis:6379
#    ports:
#      - "8070:8070"
#    depends_on:
#      kafka:
#        condition: service_started
#      registry:
#        condition: service_healthy
#      redis:
#        condition: service_started
#  clickhouse:
#    image: clickhouse/clickhouse-server:23.4.2.11-alpine
#    ports:
#      - "9002:9000"
#    healthcheck:
#      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1